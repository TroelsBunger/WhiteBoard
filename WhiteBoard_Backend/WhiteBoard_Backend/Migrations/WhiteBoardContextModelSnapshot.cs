// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhiteBoard_Backend.Models;

namespace WhiteBoard_Backend.Migrations
{
    [DbContext(typeof(WhiteBoardContext))]
    partial class WhiteBoardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Comments.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Post");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.ImagePost", b =>
                {
                    b.HasBaseType("WhiteBoard_Backend.Models.Entities.Posts.Post");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("ImagePost");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.QuotePost", b =>
                {
                    b.HasBaseType("WhiteBoard_Backend.Models.Entities.Posts.Post");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId1")
                        .HasColumnName("QuotePost_UserId1")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("QuotePost");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.VideoPost", b =>
                {
                    b.HasBaseType("WhiteBoard_Backend.Models.Entities.Posts.Post");

                    b.Property<string>("Url")
                        .HasColumnName("VideoPost_Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId1")
                        .HasColumnName("VideoPost_UserId1")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId1");

                    b.HasDiscriminator().HasValue("VideoPost");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Comments.Comment", b =>
                {
                    b.HasOne("WhiteBoard_Backend.Models.Entities.Posts.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhiteBoard_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.Post", b =>
                {
                    b.HasOne("WhiteBoard_Backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.ImagePost", b =>
                {
                    b.HasOne("WhiteBoard_Backend.Models.User", null)
                        .WithMany("ImagePosts")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.QuotePost", b =>
                {
                    b.HasOne("WhiteBoard_Backend.Models.User", null)
                        .WithMany("QuotePosts")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WhiteBoard_Backend.Models.Entities.Posts.VideoPost", b =>
                {
                    b.HasOne("WhiteBoard_Backend.Models.User", null)
                        .WithMany("VideoPosts")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
